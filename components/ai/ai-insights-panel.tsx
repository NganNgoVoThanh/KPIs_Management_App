"use client"

import { useState, useEffect } from 'react'
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'
import { Badge } from '@/components/ui/badge'
import { Progress } from '@/components/ui/progress'
import { TrendingUp, TrendingDown, Target, AlertCircle } from 'lucide-react'
import { enhancedAIService } from '@/lib/ai-services-enhanced'

interface AIInsightsPanelProps {
  userId: string
  timeframe?: string
  className?: string
}

export function AIInsightsPanel({ userId, timeframe = 'current', className }: AIInsightsPanelProps) {
  const [insights, setInsights] = useState<string[]>([])
  const [loading, setLoading] = useState(true)
  const [performanceSummary, setPerformanceSummary] = useState<any>(null)

  useEffect(() => {
    loadInsights()
  }, [userId, timeframe])

  const loadInsights = async () => {
    try {
      setLoading(true)
      
      // Mock performance data - in production, load from database
      const performanceData = [
        { id: 'kpi-1', actualValue: 95, targetValue: 100, name: 'Production Efficiency' },
        { id: 'kpi-2', actualValue: 102, targetValue: 95, name: 'Quality Score' },
        { id: 'kpi-3', actualValue: 88, targetValue: 90, name: 'Customer Satisfaction' }
      ]

      const aiInsights = await enhancedAIService.generateInsights(performanceData, timeframe)
      setInsights(aiInsights)

      // Calculate summary metrics
      const summary = {
        avgPerformance: performanceData.reduce((sum, kpi) => sum + (kpi.actualValue / kpi.targetValue), 0) / performanceData.length,
        overachievers: performanceData.filter(kpi => kpi.actualValue / kpi.targetValue > 1.1).length,
        underperformers: performanceData.filter(kpi => kpi.actualValue / kpi.targetValue < 0.9).length,
        totalKpis: performanceData.length
      }
      setPerformanceSummary(summary)

    } catch (error) {
      console.error('Failed to load AI insights:', error)
      setInsights(['AI insights temporarily unavailable'])
    } finally {
      setLoading(false)
    }
  }

  if (loading) {
    return (
      <div className={`animate-pulse space-y-3 ${className}`}>
        <div className="h-4 bg-gray-200 rounded w-3/4"></div>
        <div className="h-4 bg-gray-200 rounded w-1/2"></div>
        <div className="h-4 bg-gray-200 rounded w-2/3"></div>
      </div>
    )
  }

  return (
    <div className={`space-y-4 ${className}`}>
      {/* Performance Summary */}
      {performanceSummary && (
        <div className="grid grid-cols-1 md:grid-cols-4 gap-4 mb-4">
          <div className="bg-red-50 p-3 rounded">
            <div className="text-xl font-bold text-red-600">
              {(performanceSummary.avgPerformance * 100).toFixed(0)}%
            </div>
            <div className="text-sm text-gray-600">Avg Performance</div>
          </div>
          <div className="bg-green-50 p-3 rounded">
            <div className="text-xl font-bold text-green-600">
              {performanceSummary.overachievers}
            </div>
            <div className="text-sm text-gray-600">Overachieving</div>
          </div>
          <div className="bg-red-50 p-3 rounded">
            <div className="text-xl font-bold text-red-600">
              {performanceSummary.underperformers}
            </div>
            <div className="text-sm text-gray-600">Need Attention</div>
          </div>
          <div className="bg-gray-50 p-3 rounded">
            <div className="text-xl font-bold text-gray-600">
              {performanceSummary.totalKpis}
            </div>
            <div className="text-sm text-gray-600">Total KPIs</div>
          </div>
        </div>
      )}

      {/* AI Insights */}
      <div className="space-y-2">
        <h3 className="font-medium text-sm flex items-center gap-2">
          <Target className="h-4 w-4 text-red-600" />
          AI-Generated Insights
        </h3>
        {insights.map((insight, index) => (
          <div key={index} className="flex items-start gap-2 p-3 bg-red-50 rounded border border-red-200">
            <div className="flex-shrink-0 mt-0.5">
              {insight.includes('above') || insight.includes('strong') || insight.includes('excellent') ? 
                <TrendingUp className="h-4 w-4 text-green-600" /> :
                insight.includes('below') || insight.includes('decline') || insight.includes('concern') ?
                <TrendingDown className="h-4 w-4 text-red-600" /> :
                <AlertCircle className="h-4 w-4 text-red-600" />
              }
            </div>
            <p className="text-sm text-gray-700">{insight}</p>
          </div>
        ))}
      </div>

      <div className="text-xs text-gray-500 text-center pt-2 border-t">
        Insights generated by AI â€¢ Last updated: {new Date().toLocaleTimeString()}
      </div>
    </div>
  )
}